#!/usr/bin/env bash

set -o nounset
set -o errexit
#set -o xtrace

function cleanup {
#   echo "Killing all sub-processes..."
   kill -- -$$
}

trap exit INT
trap cleanup EXIT

export BASE_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd -P )

function usage {
  cat <<EOT

Usage:
    The script generate the bam file for igv inspection. It subset reads from bam file(s) give a location(usually a gene).
    It perform the following for the give bam file(s):
        - create hyper link to tmp folder specified by -t (default ~/tmp)
        - subset bam by location string specified by -l
        - if in single cell mode, further subset bam by barcode list specified by -B
          If the barcode list is from cloupe browser export, the cell barcode will be
          post-fix by a sample id (-1,-2,-3 etc ), in order to use this list to extract the reads from the bam file,
          one needs to manual change all the sample id back to 1, i.e AAACGCTGTCCTACAA-1
        - A further merge(not included in the script) can be done by calling sambamba merge -t <bams> if needed

Options:
        --temp-dir
        --output-dir
        --input-bam
            input bam, can be specified multiple times
        --location-string
            location to be subset in format "12:73901375-73947530"
        --cores
            number of cores. default: 2
            lower the number of cores if subset-bam run into error: thread 'main' panicked at 'index out of bounds:...'
        --cell-barcode-tsv
            barcode list in tsv format. This is usually generated by exporting from cloupe browser.
            Only calling subset-bam from 10x when this parameter is provided.
        -f --force-remove
             subset-bam does not allow exist output, if this is specified, output will be deleted without prompt.
             useful for calling in script.
        -h --help

Example:

bash bam4igv.sh \\
    --input-bam /home/xinhe/projects/hif1a_scs/results/subset_bams/1_DM1_hif1a.bam \\
    --input-bam /home/xinhe/projects/hif1a_scs/results/subset_bams/1_DM2_hif1a.bam \\
    --output-dir ~/tmp/bam4igv \\
    --location-string "12:73901375-73947530" \\
    --cell-barcode-tsv /home/xinhe/projects/hif1a_scs/cluster/cluster_1_D.tsv \\
    --cores 2

bash bam4igv.sh --cores 2 \\
    --input-bam /home/xinhe/projects/hif1a_scs/results/subset_bams/1_DM1_hif1a.bam \\
    --input-bam /home/xinhe/projects/hif1a_scs/results/subset_bams/1_DM2_hif1a.bam \\
    --output-dir ~/tmp/bam4igv \\
    --location-string "12:73901375-73947530" \\
    --cores 2


EOT
exit 0
}

OPTS="$(getopt -o h,f -l help,force-remove,input-bam:,location-string:,output-dir:,cores:,cell-barcode-tsv: --name "$(basename "$0")" -- "$@")"
if [ $? != 0 ] ; then echo "Failed parsing options." >&2 ; exit 1 ; fi
if [ "$#" -eq  "0"  ] ; then usage ; exit 1 ; fi
eval set -- "$OPTS"

## default value
NUM_CORES=2
INPUT_BAM=''
OUT_DIR=~/tmp
BARCODE_FILE=''
FORCE_REMOVE='no'

# so subset-bam not filling the whole /tmp

## read parameter
while true; do
  case $1 in
    -h | --help ) usage;;
    --input-bam )  INPUT_BAM+=" "$2; shift 2 ;;
    --output-dir )  OUT_DIR=$2    ; shift 2 ;;
    --location-string )  LOCATION_STRING=$2    ; shift 2 ;;
    -f | --force-remove )  FORCE_REMOVE='yes'    ; shift 1 ;;
    --cell-barcode-tsv )  BARCODE_FILE=$2    ; shift 2 ;;
    --cores )  NUM_CORES=$2 ; shift 2 ;;
    -- ) shift; break  ;;
    *)  echo "Error: dont know parameter $1"; usage ;;
  esac
done


[[ ! -d ${OUT_DIR} ]] && mkdir ${OUT_DIR}
export TMPDIR=${OUT_DIR}

for bam in ${INPUT_BAM}; do
    bam_name=`basename ${bam}`
    echo "create link to orginal bam file at" ${OUT_DIR}/${bam_name}
    ln -sf ${bam} ${OUT_DIR}/${bam_name}

    if [[ ! -e ${OUT_DIR}/${bam_name}.bai ]]; then
        echo "create index for bam file " ${OUT_DIR}/${bam_name}
        sambamba index -t ${NUM_CORES} ${OUT_DIR}/${bam_name} >/dev/null 2>&1
    fi

    echo "subset read from location ${LOCATION_STRING} form bam file " ${OUT_DIR}/${bam_name}
    subset_bam_name=${LOCATION_STRING}_${bam_name}
    samtools view -b ${OUT_DIR}/${bam_name} --threads 1 ${LOCATION_STRING} -o ${OUT_DIR}/${subset_bam_name}
    sambamba index -t ${NUM_CORES} ${OUT_DIR}/${subset_bam_name} >/dev/null 2>&1

    if [[ ${BARCODE_FILE} != '' ]];then
        echo "subset read from cell barcode list " ${BARCODE_FILE}
        subset_cell_name=$(basename ${BARCODE_FILE%.*})
        subset_cell_bam_name=${subset_cell_name}_${subset_bam_name}

        # subset-bam does not allow exist output, thus need delete
        if [[ -e ${OUT_DIR}/${subset_cell_bam_name}  ]];then
            if [[ ${FORCE_REMOVE} = 'yes' ]];then
                rm ${OUT_DIR}/${subset_cell_bam_name}
            else
                echo "${OUT_DIR}/${subset_cell_bam_name} already exist. Need to be removed before calling subset-bam[y/n]."
                rm -i ${OUT_DIR}/${subset_cell_bam_name}
            fi
        fi
        subset-bam --cores ${NUM_CORES} --bam ${OUT_DIR}/${subset_bam_name} \
                --cell-barcodes ${BARCODE_FILE} \
                --out-bam ${OUT_DIR}/${subset_cell_bam_name}
        sambamba index -t ${NUM_CORES} ${OUT_DIR}/${subset_cell_bam_name} >/dev/null 2>&1
        echo "final output can be found at "${OUT_DIR}/${subset_cell_bam_name}
    else
        echo "final output can be found at "${OUT_DIR}/${subset_bam_name}
    fi
done
